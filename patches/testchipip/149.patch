From 3e427ac94c7896494701a679f2e7493f2d3849d8 Mon Sep 17 00:00:00 2001
From: singularity <chency_singularity@163.com>
Date: Tue, 4 Oct 2022 22:08:40 +0800
Subject: [PATCH] fix: S-interpolator for assert, assume and printf

---
 src/main/scala/Network.scala   | 10 +++++-----
 src/main/scala/TraceIO.scala   |  2 +-
 src/main/scala/Unittests.scala |  6 +++---
 3 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/src/main/scala/Network.scala b/src/main/scala/Network.scala
index b0da686..0b1f0e4 100644
--- a/src/main/scala/Network.scala
+++ b/src/main/scala/Network.scala
@@ -103,11 +103,11 @@ trait HasTLNetwork {
     val releaseIds = filter(forwardIds, probing)
 
     assert(!in.a.valid || PopCount(aMatches) === 1.U,
-      s"$networkName: Multiple or no matching routes for A channel $i")
+      cf"$networkName: Multiple or no matching routes for A channel ${i.toString}")
     assert(!in.c.valid || PopCount(cMatches) === 1.U,
-      s"$networkName: Multiple or no matching routes for C channel $i")
+      cf"$networkName: Multiple or no matching routes for C channel ${i.toString}")
     assert(!in.e.valid || PopCount(eMatches) === 1.U,
-      s"$networkName: Multiple or no matching routes for E channel $i")
+      cf"$networkName: Multiple or no matching routes for E channel ${i.toString}")
 
     val connectBCE = canRelease(i)
 
@@ -161,9 +161,9 @@ trait HasTLNetwork {
       route => route(out.d.bits.source))
 
     assert(!out.b.valid || PopCount(bMatches) === 1.U,
-      s"TLRingNetwork: Multiple or no matching routes for B channel $i")
+      cf"TLRingNetwork: Multiple or no matching routes for B channel ${i.toString}")
     assert(!out.d.valid || PopCount(dMatches) === 1.U,
-      s"TLRingNetwork: Multiple or no matching routes for D channel $i")
+      cf"TLRingNetwork: Multiple or no matching routes for D channel ${i.toString}")
 
     val grantIds = filter(backwardIds, reachable)
     val probeIds = filter(backwardIds, probeable)
diff --git a/src/main/scala/TraceIO.scala b/src/main/scala/TraceIO.scala
index 3e2116a..d8f573e 100644
--- a/src/main/scala/TraceIO.scala
+++ b/src/main/scala/TraceIO.scala
@@ -198,7 +198,7 @@ trait CanHaveTraceIOModuleImp { this: LazyModuleImpLike =>
       for ((trace, idx) <- tio.traces.zipWithIndex ) {
         withClockAndReset(trace.clock, trace.reset) {
           // The reverse is here to match the behavior the Cat used in the bridge
-          printf(s"TRACEPORT ${idx}: %x\n", trace.insns.reverse.asUInt.pad(512))
+          printf("TRACEPORT ${idx}: %x\n", trace.insns.reverse.asUInt.pad(512))
         }
       }
     }
diff --git a/src/main/scala/Unittests.scala b/src/main/scala/Unittests.scala
index 5e68c86..fd6dcf8 100644
--- a/src/main/scala/Unittests.scala
+++ b/src/main/scala/Unittests.scala
@@ -448,12 +448,12 @@ class NetworkXbarTestChecker(nOut: Int, id: Int, streams: Seq[Seq[Int]]) extends
     val streamLast = streamIdx === (streamInit.length-1).U
 
     when (curStream === i.U && io.in.valid) {
-      assert(io.in.bits.payload === streamExpect(streamIdx), s"Unexpected data at output ${id}")
-      assert(io.in.bits.last === streamLast, s"Unexpect last at output ${id}")
+      assert(io.in.bits.payload === streamExpect(streamIdx), cf"Unexpected data at output ${id.toString}")
+      assert(io.in.bits.last === streamLast, cf"Unexpect last at output ${id.toString}")
     }
   }
 
-  assert(!io.in.valid || io.in.bits.netId === id.U, s"Output ${id} got data intended for another")
+  assert(!io.in.valid || io.in.bits.netId === id.U, cf"Output ${id.toString} got data intended for another")
 
   val finished = RegInit(false.B)
 
