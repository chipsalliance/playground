From 9f6a230bde29c27d8bef99e379873d416677e168 Mon Sep 17 00:00:00 2001
From: singularity <chency_singularity@163.com>
Date: Wed, 5 Oct 2022 23:39:39 +0800
Subject: [PATCH] fix: S-interpolator for assert, assume and printf

---
 design/craft/inclusivecache/src/MSHR.scala | 9 +++++----
 1 file changed, 5 insertions(+), 4 deletions(-)

diff --git a/design/craft/inclusivecache/src/MSHR.scala b/design/craft/inclusivecache/src/MSHR.scala
index 373fbdf..a7bbd42 100644
--- a/design/craft/inclusivecache/src/MSHR.scala
+++ b/design/craft/inclusivecache/src/MSHR.scala
@@ -23,6 +23,7 @@ import freechips.rocketchip.tilelink._
 import TLPermissions._
 import TLMessages._
 import MetaData._
+import chisel3.PrintableHelper
 
 class ScheduleRequest(params: InclusiveCacheParameters) extends InclusiveCacheBundle(params)
 {
@@ -340,12 +341,12 @@ class MSHR(params: InclusiveCacheParameters) extends Module
     if (cover) {
       params.ccover(evict === from.code, s"MSHR_${from}_EVICT", s"State transition from ${from} to evicted ${cfg}")
     } else {
-      assert(!(evict === from.code), s"State transition from ${from} to evicted should be impossible ${cfg}")
+      assert(!(evict === from.code), cf"State transition from ${from} to evicted should be impossible ${cfg}")
     }
     if (cover && f) {
       params.ccover(before === from.code, s"MSHR_${from}_FLUSH", s"State transition from ${from} to flushed ${cfg}")
     } else {
-      assert(!(before === from.code), s"State transition from ${from} to flushed should be impossible ${cfg}")
+      assert(!(before === from.code), cf"State transition from ${from} to flushed should be impossible ${cfg}")
     }
   }
 
@@ -353,7 +354,7 @@ class MSHR(params: InclusiveCacheParameters) extends Module
     if (cover) {
       params.ccover(before === from.code && after === to.code, s"MSHR_${from}_${to}", s"State transition from ${from} to ${to} ${cfg}")
     } else {
-      assert(!(before === from.code && after === to.code), s"State transition from ${from} to ${to} should be impossible ${cfg}")
+      assert(!(before === from.code && after === to.code), cf"State transition from ${from} to ${to} should be impossible ${cfg}")
     }
   }
 
@@ -510,7 +511,7 @@ class MSHR(params: InclusiveCacheParameters) extends Module
     if (cover) {
       params.ccover(prior === from.code, s"MSHR_${from}_BYPASS", s"State bypass transition from ${from} ${cfg}")
     } else {
-      assert(!(prior === from.code), s"State bypass from ${from} should be impossible ${cfg}")
+      assert(!(prior === from.code), cf"State bypass from ${from} should be impossible ${cfg}")
     }
   }
 
