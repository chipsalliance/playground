diff --git a/build.sc b/build.sc
index 06ea6ca7dc..bfd9eb3e0e 100644
--- a/build.sc
+++ b/build.sc
@@ -2,115 +2,124 @@ import mill._
 import mill.scalalib._
 import mill.scalalib.publish._
 import coursier.maven.MavenRepository
-import $file.hardfloat.build
+import $file.hardfloat.common
 import $file.cde.common
 import $file.common
 
-object cdeRocket extends cde.common.CDEModule with PublishModule {
-  override def millSourcePath = os.pwd / "cde" / "cde"
+object v {
+  val scala = "2.13.10"
+  // the first version in this Map is the mainly supported version which will be used to run tests
+  val chiselCrossVersions = Map(
+    "3.6.0" -> (ivy"edu.berkeley.cs::chisel3:3.6.0", ivy"edu.berkeley.cs:::chisel3-plugin:3.6.0"),
+    "5.0.0" -> (ivy"org.chipsalliance::chisel:5.0.0", ivy"org.chipsalliance:::chisel-plugin:5.0.0"),
+  )
+  val mainargs = ivy"com.lihaoyi::mainargs:0.5.0"
+  val json4sJackson = ivy"org.json4s::json4s-jackson:4.0.5"
+  val scalaReflect = ivy"org.scala-lang:scala-reflect:${scala}"
+}
 
-  override def scalaVersion = T {
-    rocketchip.scalaVersion()
-  }
+object macros extends Macros
 
-  override def pomSettings = T {
-    rocketchip.pomSettings()
-  }
+trait Macros
+  extends millbuild.common.MacrosModule
+    with RocketChipPublishModule
+    with SbtModule {
 
-  override def publishVersion = T {
-    rocketchip.publishVersion()
-  }
+  def scalaVersion: T[String] = T(v.scala)
+
+  def scalaReflectIvy = v.scalaReflect
 }
 
-object hardfloatRocket extends hardfloat.build.hardfloat {
-  override def millSourcePath = os.pwd / "hardfloat"
+object hardfloat extends mill.define.Cross[Hardfloat](v.chiselCrossVersions.keys.toSeq)
 
-  override def scalaVersion = T {
-    rocketchip.scalaVersion()
-  }
+trait Hardfloat
+  extends millbuild.hardfloat.common.HardfloatModule
+    with RocketChipPublishModule
+    with Cross.Module[String] {
 
-  // use same chisel version with RocketChip
-  def chisel3IvyDeps = if(chisel3Module.isEmpty) Agg(
-    common.getVersion("chisel3")
-  ) else Agg.empty[Dep]
+  def scalaVersion: T[String] = T(v.scala)
 
-  def chisel3PluginIvyDeps = if(chisel3Module.isEmpty) Agg(
-    common.getVersion("chisel3-plugin", cross = true)
-  ) else Agg.empty[Dep]
+  override def millSourcePath = os.pwd / "hardfloat" / "hardfloat"
 
-  override def repositories = super.repositories ++ Seq(
-    MavenRepository("https://oss.sonatype.org/content/repositories/snapshots"),
-    MavenRepository("https://oss.sonatype.org/content/repositories/releases")
-  )
+  def chiselModule = None
+
+  def chiselPluginJar = None
+
+  def chiselIvy = Some(v.chiselCrossVersions(crossValue)._1)
+
+  def chiselPluginIvy = Some(v.chiselCrossVersions(crossValue)._2)
 }
 
-object rocketchip extends common.CommonRocketChip {
-  m =>
-  override def scalaVersion: T[String] = T {
-    "2.13.10"
-  }
-  override def ammoniteVersion: T[String] = T {
-    "2.4.0"
-  }
+object cde extends CDE
+
+trait CDE
+  extends millbuild.cde.common.CDEModule
+    with RocketChipPublishModule
+    with ScalaModule {
 
-  def hardfloatModule = hardfloatRocket
+  def scalaVersion: T[String] = T(v.scala)
 
-  def cdeModule = cdeRocket
+  override def millSourcePath = os.pwd / "cde" / "cde"
 }
 
-def envByNameOrRiscv(name: String): String = {
-  sys.env.get(name) match {
-    case Some(value) => value
-    case None => sys.env("RISCV") // if not found, throws NoSuchElementException exception
-  }
+object rocketchip extends Cross[RocketChip](v.chiselCrossVersions.keys.toSeq)
+
+trait RocketChip
+  extends millbuild.common.RocketChipModule
+    with RocketChipPublishModule
+    with SbtModule
+    with Cross.Module[String] {
+  def scalaVersion: T[String] = T(v.scala)
+
+  override def millSourcePath = super.millSourcePath / os.up
+
+  def chiselModule = None
+
+  def chiselPluginJar = None
+
+  def chiselIvy = Some(v.chiselCrossVersions(crossValue)._1)
+
+  def chiselPluginIvy = Some(v.chiselCrossVersions(crossValue)._2)
+
+  def macrosModule = macros
+
+  def hardfloatModule = hardfloat(crossValue)
+
+  def cdeModule = cde
+
+  def mainargsIvy = v.mainargs
+
+  def json4sJacksonIvy = v.json4sJackson
 }
 
-/** object to elaborate verilated emulators. */
-object emulator extends mill.Cross[Emulator](
-  // RocketSuiteA
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultConfig"),
-  // RocketSuiteB
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultBufferlessConfig"),
-  // RocketSuiteC
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.TinyConfig"),
-  // Unittest
-  ("freechips.rocketchip.unittest.TestHarness", "freechips.rocketchip.unittest.AMBAUnitTestConfig"),
-  ("freechips.rocketchip.unittest.TestHarness", "freechips.rocketchip.unittest.TLSimpleUnitTestConfig"),
-  ("freechips.rocketchip.unittest.TestHarness", "freechips.rocketchip.unittest.TLWidthUnitTestConfig"),
-  // DTM
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.WithDebugSBASystem_freechips.rocketchip.system.DefaultConfig"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.WithDebugSBASystem_freechips.rocketchip.system.DefaultRV32Config"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.DefaultConfig"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.DefaultRV32Config"),
-  // Miscellaneous
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultSmallConfig"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DualBankConfig"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DualChannelConfig"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DualChannelDualBankConfig"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.RoccExampleConfig"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.Edge128BitConfig"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.Edge32BitConfig"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.QuadChannelBenchmarkConfig"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.EightChannelConfig"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DualCoreConfig"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.MemPortOnlyConfig"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.MMIOPortOnlyConfig"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.CloneTileConfig"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.HypervisorConfig"),
-  // 
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultRV32Config"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultFP16Config"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.BitManipCryptoConfig"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.BitManipCrypto32Config"),
-)
-class Emulator(top: String, config: String) extends Module {
+trait RocketChipPublishModule
+  extends PublishModule {
+  def pomSettings = PomSettings(
+    description = artifactName(),
+    organization = "org.chipsalliance",
+    url = "http://github.com/chipsalliance/rocket-chip",
+    licenses = Seq(License.`Apache-2.0`),
+    versionControl = VersionControl.github("chipsalliance", "rocket-chip"),
+    developers = Seq(
+      Developer("aswaterman", "Andrew Waterman", "https://aspire.eecs.berkeley.edu/author/waterman/")
+    )
+  )
+
+  override def publishVersion: T[String] = T("1.6-SNAPSHOT")
+}
+
+
+// Tests
+trait Emulator extends Cross.Module2[String, String] {
+  val top: String = crossValue
+  val config: String = crossValue2
 
   object generator extends Module {
     def elaborate = T {
       os.proc(
-        mill.modules.Jvm.javaExe,
+        mill.util.Jvm.javaExe,
         "-jar",
-        rocketchip.assembly().path,
+        rocketchip(v.chiselCrossVersions.keys.head).assembly().path,
         "--dir", T.dest.toString,
         "--top", top,
         config.split('_').flatMap(c => Seq("--config", c)),
@@ -157,11 +166,14 @@ class Emulator(top: String, config: String) extends Module {
   }
 
   object verilator extends Module {
-    def spikeRoot = T { envByNameOrRiscv("SPIKE_ROOT") }
+    def spikeRoot = T {
+      envByNameOrRiscv("SPIKE_ROOT")
+    }
 
     def csrcDir = T {
       PathRef(os.pwd / "src" / "main" / "resources" / "csrc")
     }
+
     def vsrcDir = T {
       PathRef(os.pwd / "src" / "main" / "resources" / "vsrc")
     }
@@ -173,7 +185,7 @@ class Emulator(top: String, config: String) extends Module {
         "debug_rob.cc",
         "emulator.cc",
         "remote_bitbang.cc",
-        ).map(c => PathRef(csrcDir().path / c))
+      ).map(c => PathRef(csrcDir().path / c))
     }
 
     def CMakeListsString = T {
@@ -237,8 +249,8 @@ class Emulator(top: String, config: String) extends Module {
     }
 
     def elf = T.persistent {
-      mill.modules.Jvm.runSubprocess(Seq("cmake", "-G", "Ninja", "-S", cmakefileLists().path, "-B", T.dest.toString).map(_.toString), Map[String, String](), T.dest)
-      mill.modules.Jvm.runSubprocess(Seq("ninja", "-C", T.dest).map(_.toString), Map[String, String](), T.dest)
+      mill.util.Jvm.runSubprocess(Seq("cmake", "-G", "Ninja", "-S", cmakefileLists().path, "-B", T.dest.toString).map(_.toString), Map[String, String](), T.dest)
+      mill.util.Jvm.runSubprocess(Seq("ninja", "-C", T.dest).map(_.toString), Map[String, String](), T.dest)
       PathRef(T.dest / "emulator")
     }
   }
@@ -248,29 +260,44 @@ class Emulator(top: String, config: String) extends Module {
   }
 }
 
-object `riscv-tests` extends Module {
-  def testsRoot =
-    os.Path(envByNameOrRiscv("RISCV_TESTS_ROOT")) / "riscv64-unknown-elf" / "share" / "riscv-tests"
-
-  def allCases = T {
-    os.walk(testsRoot).filterNot(p => p.last.endsWith("dump"))
-  }
-
-  object suite extends mill.Cross[Suite](
-    os.walk(testsRoot).map(_.last).filterNot(_.endsWith("dump")).map(_.split('-').dropRight(1).mkString("-")).filter(_ != "").toSet.toSeq.sorted: _*
-  )
-
-  class Suite(name: String) extends Module {
-
-    def description = T {
-      s"test suite ${name} from riscv-tests"
-    }
-
-    def binaries = T {
-      allCases().filter(p => p.last.startsWith(name)).map(PathRef(_))
-    }
-  }
-}
+/** object to elaborate verilated emulators. */
+object emulator extends Cross[Emulator](
+  // RocketSuiteA
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultConfig"),
+  // RocketSuiteB
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultBufferlessConfig"),
+  // RocketSuiteC
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.TinyConfig"),
+  // Unittest
+  ("freechips.rocketchip.unittest.TestHarness", "freechips.rocketchip.unittest.AMBAUnitTestConfig"),
+  ("freechips.rocketchip.unittest.TestHarness", "freechips.rocketchip.unittest.TLSimpleUnitTestConfig"),
+  ("freechips.rocketchip.unittest.TestHarness", "freechips.rocketchip.unittest.TLWidthUnitTestConfig"),
+  // DTM
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.WithDebugSBASystem_freechips.rocketchip.system.DefaultConfig"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.WithDebugSBASystem_freechips.rocketchip.system.DefaultRV32Config"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.DefaultConfig"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.DefaultRV32Config"),
+  // Miscellaneous
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultSmallConfig"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DualBankConfig"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DualChannelConfig"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DualChannelDualBankConfig"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.RoccExampleConfig"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.Edge128BitConfig"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.Edge32BitConfig"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.QuadChannelBenchmarkConfig"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.EightChannelConfig"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DualCoreConfig"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.MemPortOnlyConfig"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.MMIOPortOnlyConfig"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.CloneTileConfig"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.HypervisorConfig"),
+  //
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultRV32Config"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultFP16Config"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.BitManipCryptoConfig"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.BitManipCrypto32Config"),
+)
 
 object `runnable-riscv-test` extends mill.Cross[RiscvTest](
   ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultConfig", "rv64mi-p", "none"),
@@ -351,8 +378,71 @@ object `runnable-riscv-test` extends mill.Cross[RiscvTest](
   ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultFP16Config", "rv64uzfh-v", "none"),
 )
 
+object `runnable-arch-test` extends mill.Cross[ArchTest](
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultConfig", "64", "RV64IMAFDCZicsr_Zifencei"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultRV32Config", "32", "RV32IMAFCZicsr_Zifencei"),
+  // For CI within reasonable time
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultConfig", "64", "RV64IMACZicsr_Zifencei"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultRV32Config", "32", "RV32IMACZicsr_Zifencei"),
+
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.BitManipCryptoConfig", "64", "RV64IZba_Zbb_Zbc_Zbkb_Zbkc_Zbkx_Zbs_Zknd_Zkne_Zknh_Zksed_Zksh"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.BitManipCrypto32Config", "32", "RV32IZba_Zbb_Zbc_Zbkb_Zbkc_Zbkx_Zbs_Zknd_Zkne_Zknh_Zksed_Zksh"),
+)
+
+object `runnable-jtag-dtm-test` extends mill.Cross[JTAGDTMTest](
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.DefaultConfig", "off", "64", "DebugTest"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.DefaultConfig", "off", "64", "MemTest64"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.DefaultRV32Config", "off", "32", "DebugTest"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.DefaultRV32Config", "off", "32", "MemTest64"),
+  // SBA
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.WithDebugSBASystem_freechips.rocketchip.system.DefaultConfig", "on", "64", "MemTest64"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.WithDebugSBASystem_freechips.rocketchip.system.DefaultConfig", "on", "64", "MemTest32"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.WithDebugSBASystem_freechips.rocketchip.system.DefaultRV32Config", "on", "32", "MemTest64"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.WithDebugSBASystem_freechips.rocketchip.system.DefaultRV32Config", "on", "32", "MemTest32"),
+  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.WithDebugSBASystem_freechips.rocketchip.system.DefaultRV32Config", "on", "32", "MemTest8"),
+)
+
+// TODO: split below into another file.
+def envByNameOrRiscv(name: String): String = {
+  sys.env.get(name) match {
+    case Some(value) => value
+    // TODO: if not found, give a warning
+    case None => sys.env("RISCV")
+  }
+}
+
+object `riscv-tests` extends Module {
+  def testsRoot =
+    os.Path(envByNameOrRiscv("RISCV_TESTS_ROOT")) / "riscv64-unknown-elf" / "share" / "riscv-tests"
+
+  def allCases = T {
+    os.walk(testsRoot).filterNot(p => p.last.endsWith("dump"))
+  }
+
+  object suite extends Cross[Suite](
+    os.walk(testsRoot).map(_.last).filterNot(_.endsWith("dump")).map(_.split('-').dropRight(1).mkString("-")).filter(_ != "").toSet.toSeq.sorted
+  )
+
+  trait Suite extends Cross.Module[String] {
+    val name: String = crossValue
+
+    def description = T {
+      s"test suite ${name} from riscv-tests"
+    }
+
+    def binaries = T {
+      allCases().filter(p => p.last.startsWith(name)).map(PathRef(_))
+    }
+  }
+}
+
 // exclude defaults to "none" instead of "" because it is a file name
-class RiscvTest(top: String, config: String, suiteName: String, exclude: String) extends Module {
+trait RiscvTest extends Cross.Module4[String, String, String, String] {
+  val top: String = crossValue
+  val config: String = crossValue2
+  val suiteName: String = crossValue3
+  val exclude: String = crossValue4
+
   def run = T {
     `riscv-tests`.suite(suiteName).binaries().map { bin =>
       val name = bin.path.last
@@ -375,17 +465,12 @@ class RiscvTest(top: String, config: String, suiteName: String, exclude: String)
   }
 }
 
-object `runnable-arch-test` extends mill.Cross[ArchTest](
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultConfig", "64", "RV64IMAFDCZicsr_Zifencei"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultRV32Config", "32", "RV32IMAFCZicsr_Zifencei"),
-  // For CI within reasonable time
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultConfig", "64", "RV64IMACZicsr_Zifencei"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.DefaultRV32Config", "32", "RV32IMACZicsr_Zifencei"),
+trait ArchTest extends Cross.Module4[String, String, String, String] {
+  val top: String = crossValue
+  val config: String = crossValue2
+  val xlen: String = crossValue3
+  val isa: String = crossValue4
 
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.BitManipCryptoConfig", "64", "RV64IZba_Zbb_Zbc_Zbkb_Zbkc_Zbkx_Zbs_Zknd_Zkne_Zknh_Zksed_Zksh"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.BitManipCrypto32Config", "32", "RV32IZba_Zbb_Zbc_Zbkb_Zbkc_Zbkx_Zbs_Zknd_Zkne_Zknh_Zksed_Zksh"),
-)
-class ArchTest(top: String, config: String, xlen: String, isa: String) extends Module {
   def ispecString = T {
     // format: off
     s"""hart_ids: [0]
@@ -414,7 +499,9 @@ class ArchTest(top: String, config: String, xlen: String, isa: String) extends M
     // format: on
   }
 
-  def spikeRoot = T { envByNameOrRiscv("SPIKE_ROOT") }
+  def spikeRoot = T {
+    envByNameOrRiscv("SPIKE_ROOT")
+  }
 
   def CC = T {
     sys.env.get("RV64_TOOLCHAIN_ROOT") match {
@@ -470,7 +557,9 @@ class ArchTest(top: String, config: String, xlen: String, isa: String) extends M
     PathRef(T.dest)
   }
 
-  def home = T { configIni() }
+  def home = T {
+    configIni()
+  }
 
   def src = T {
     if (!os.exists(home().path / "riscv-arch-test")) {
@@ -502,20 +591,13 @@ class ArchTest(top: String, config: String, xlen: String, isa: String) extends M
   }
 }
 
-object `runnable-jtag-dtm-test` extends mill.Cross[JTAGDTMTest](
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.DefaultConfig", "off", "64", "DebugTest"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.DefaultConfig", "off", "64", "MemTest64"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.DefaultRV32Config", "off", "32", "DebugTest"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.DefaultRV32Config", "off", "32", "MemTest64"),
-  // SBA
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.WithDebugSBASystem_freechips.rocketchip.system.DefaultConfig", "on", "64", "MemTest64"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.WithDebugSBASystem_freechips.rocketchip.system.DefaultConfig", "on", "64", "MemTest32"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.WithDebugSBASystem_freechips.rocketchip.system.DefaultRV32Config", "on", "32", "MemTest64"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.WithDebugSBASystem_freechips.rocketchip.system.DefaultRV32Config", "on", "32", "MemTest32"),
-  ("freechips.rocketchip.system.TestHarness", "freechips.rocketchip.system.WithJtagDTMSystem_freechips.rocketchip.system.WithDebugSBASystem_freechips.rocketchip.system.DefaultRV32Config", "on", "32", "MemTest8"),
-)
+trait JTAGDTMTest extends Cross.Module5[String, String, String, String, String] {
+  val top: String = crossValue
+  val config: String = crossValue2
+  val sba: String = crossValue3
+  val xlen: String = crossValue4
+  val name: String = crossValue5
 
-class JTAGDTMTest(top: String, config: String, sba: String, xlen: String, name: String) extends Module {
   def run = T {
     val gdbserver = os.Path(sys.env.get("RISCV_TESTS_ROOT").get) / "debug" / "gdbserver.py"
     val p = os.proc(
@@ -530,9 +612,9 @@ class JTAGDTMTest(top: String, config: String, sba: String, xlen: String, name:
       name,
     ).call(
       env = Map(
-          "TERM" -> "", // otherwise readline issues on bracketed-paste
-          "JTAG_DTM_ENABLE_SBA" -> sba,
-        ),
+        "TERM" -> "", // otherwise readline issues on bracketed-paste
+        "JTAG_DTM_ENABLE_SBA" -> sba,
+      ),
       stdout = T.dest / s"$name.running.log",
       mergeErrIntoOut = true,
       check = false)
diff --git a/common.sc b/common.sc
index a7dcfe36f8..c694973a3b 100644
--- a/common.sc
+++ b/common.sc
@@ -1,122 +1,65 @@
 import mill._
 import mill.scalalib._
-import mill.scalalib.publish._
-import coursier.maven.MavenRepository
-
-val defaultVersions = Map(
-  "chisel3" -> "3.6.0",
-  "chisel3-plugin" -> "3.6.0"
-)
-
-def getVersion(dep: String, org: String = "edu.berkeley.cs", cross: Boolean = false) = {
-  val version = sys.env.getOrElse(dep + "Version", defaultVersions(dep))
-  if (cross)
-    ivy"$org:::$dep:$version"
-  else
-    ivy"$org::$dep:$version"
+
+trait HasMacroAnnotations
+  extends ScalaModule {
+  override def scalacOptions = T(super.scalacOptions() ++ Agg("-Ymacro-annotations"))
 }
 
-/** The reason to split build.sc to two file is
-  * [[CommonRocketChip]] doesn't need to import `$file.chisel3` and `$file.firrtl`.
-  *
-  * You can extends from [[CommonRocketChip]] to use rocket-chip as build-from-source dependency.
-  * When doing this, you may like to override `chisel3Module`, `hardfloatModule`, `cdeModule`,
-  * setting them to your favorite commit of those packages.
-  *
-  * If you don't override `chisel3Module`, which will default to be `None`,
-  * and mill will automatically use chisel3 from ivy.
-  */
-trait CommonRocketChip extends SbtModule with PublishModule {
-  m =>
-
-  object macros extends SbtModule with PublishModule {
-    override def scalaVersion = T {
-      m.scalaVersion()
-    }
-
-    override def ivyDeps = T {
-      m.ivyDeps()
-    }
-
-    override def pomSettings = T {
-      m.pomSettings()
-    }
-
-    override def publishVersion = T {
-      m.publishVersion()
-    }
-
-    override def repositories = super.repositories ++ Seq(
-      MavenRepository("https://oss.sonatype.org/content/repositories/snapshots"),
-      MavenRepository("https://oss.sonatype.org/content/repositories/releases")
-    )
-  }
+trait HasChisel
+  extends ScalaModule {
+  // Define these for building chisel from source
+  def chiselModule: Option[ScalaModule]
 
-  object test extends Tests {
-    override def scalacPluginClasspath = m.scalacPluginClasspath
+  override def moduleDeps = super.moduleDeps ++ chiselModule
 
-    override def ivyDeps = m.ivyDeps() ++ Agg(
-      ivy"org.scalatest::scalatest:3.2.0"
-    )
+  def chiselPluginJar: T[Option[PathRef]]
+
+  override def scalacOptions = T(super.scalacOptions() ++ chiselPluginJar().map(path => s"-Xplugin:${path.path}"))
+
+  override def scalacPluginClasspath: T[Agg[PathRef]] = T(super.scalacPluginClasspath() ++ chiselPluginJar())
 
-    def testFrameworks = T {
-      Seq("org.scalatest.tools.Framework")
-    }
-  }
+  // Define these for building chisel from ivy
+  def chiselIvy: Option[Dep]
 
-  override def millSourcePath = super.millSourcePath / os.up
+  override def ivyDeps = T(super.ivyDeps() ++ chiselIvy)
 
-  def chisel3Module: Option[PublishModule] = None
+  def chiselPluginIvy: Option[Dep]
 
-  def hardfloatModule: PublishModule
+  override def scalacPluginIvyDeps: T[Agg[Dep]] = T(super.scalacPluginIvyDeps() ++ chiselPluginIvy.map(Agg(_)).getOrElse(Agg.empty[Dep]))
+}
 
-  def cdeModule: PublishModule
+trait MacrosModule
+  extends ScalaModule {
 
-  def chisel3IvyDeps = if (chisel3Module.isEmpty) Agg(
-    getVersion("chisel3")
-  ) else Agg.empty[Dep]
+  def scalaReflectIvy: Dep
 
-  override def mainClass = T {
-    Some("freechips.rocketchip.diplomacy.Main")
-  }
+  override def ivyDeps = T(super.ivyDeps() ++ Some(scalaReflectIvy))
+}
 
-  override def moduleDeps = Seq(macros) ++ chisel3Module :+ hardfloatModule :+ cdeModule
 
-  override def scalacOptions = T {
-    Seq("-deprecation", "-unchecked")
-  }
+trait RocketChipModule
+  extends HasChisel {
+  override def mainClass = T(Some("freechips.rocketchip.diplomacy.Main"))
 
-  override def ivyDeps = T {
-    Agg(
-      ivy"${scalaOrganization()}:scala-reflect:${scalaVersion()}",
-      ivy"org.json4s::json4s-jackson:4.0.5",
-      ivy"org.scalatest::scalatest:3.2.0",
-      ivy"com.lihaoyi::mainargs:0.5.0"
-    ) ++ chisel3IvyDeps
-  }
+  def macrosModule: MacrosModule
 
-  private val chisel3Plugin = getVersion("chisel3-plugin", cross = true)
+  // should be hardfloat/common.sc#HardfloatModule
+  def hardfloatModule: ScalaModule
 
-  override def repositories = super.repositories ++ Seq(
-    MavenRepository("https://oss.sonatype.org/content/repositories/snapshots"),
-    MavenRepository("https://oss.sonatype.org/content/repositories/releases")
-  )
+  // should be cde/common.sc#CDEModule
+  def cdeModule: ScalaModule
 
-  override def scalacPluginIvyDeps = if(chisel3Module.isEmpty) Agg(chisel3Plugin) else Agg.empty[Dep]
+  def mainargsIvy: Dep
 
-  def publishVersion = T {
-    "1.6.0"
-  }
+  def json4sJacksonIvy: Dep
 
-  def pomSettings = T {
-    PomSettings(
-      description = artifactName(),
-      organization = "edu.berkeley.cs",
-      url = "https://github.com/chipsalliance/rocket-chip",
-      licenses = Seq(License.`Apache-2.0`, License.`BSD-3-Clause`),
-      versionControl = VersionControl.github("chipsalliance", "rocket-chip"),
-      developers = Seq.empty
+  override def moduleDeps = super.moduleDeps ++ Seq(macrosModule, hardfloatModule, cdeModule)
+
+  override def ivyDeps = T(
+    super.ivyDeps() ++ Agg(
+      mainargsIvy,
+      json4sJacksonIvy
     )
-  }
-  override def artifactName = "rocketchip"
+  )
 }
diff --git a/overlay.nix b/overlay.nix
index 8dfc3a656e..c7698a0282 100644
--- a/overlay.nix
+++ b/overlay.nix
@@ -1,4 +1,11 @@
 final: prev: {
+  mill = prev.mill.overrideAttrs (oldAttrs: rec {
+    version = "0.11.1";
+    src = prev.fetchurl {
+      url = "https://github.com/com-lihaoyi/mill/releases/download/${version}/${version}-assembly";
+      hash = "sha256-qG+Ddn0BHUZX1VX5hO84exgRz8YuUgYF/fH6MmgkrXE=";
+    };
+  });
   riscvTests = final.pkgsCross.riscv64-embedded.stdenv.mkDerivation rec {
     pname = "riscv-tests";
     version = "55bbcc8c06637a31cc01970881ba8072838a9121";
